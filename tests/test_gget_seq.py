import unittest
from gget.gget_seq import seq


class TestSeq(unittest.TestCase):
    def test_gene(self):
        """
        Test default gene seq function on a gene ID.
        """
        result_to_test = seq("ENSG00000241794")
        expected_result = [
            ">ENSG00000241794 chromosome:GRCh38:1:153056120:153057512:-1",
            "AAACCCCTGGTACCTGAGCACTGATCTGCCTTGGAGAACCTGGTGAGTCGGCTTCCTTGAGTTCCTCTGTTCTTTGTGCCCTGAAATGTTGAGTTTAATCTGAATATGGCAAGTTTGGTGGATCCAATCCTATGAAAATTGACTTGATGCTACTTAGTGGATGAAAATTTAAGATTAGAGCACAATTATATGCTATTTTAGCTTTCTTTTGTTATACAGGTAGGTATCCATATGGACAGAGAAGTTAAGGGGTAACCTTTGATATGAAGAAGAAAAAAGAACAAAGTATTTTTCTTTATTCTCTGTCTTTCTAGTGTCCTTTACAAAGGTTTGTGTCTTAGCAGGTGTGAAAGACTACAATTCTCCCTGAGCAGCCCTTTGCTCTATGCCCAAGTCAGCCCACTTGGACTTTATAACAGATAATGATGATAGGAATAGCATATTAGATTGCCCAGGGTGTCTGAACTTGTGACTGCCTTTCTTGAATTGGTTATTTTCAGGGAAATAAGATGCTTGATTCTTTATAACAGAGATAATTTATTTGGAAAAATTGTATGAGAAAACACAGGATTTCCTAGGGACAATGAAGCAATTTGTTAAAGTGGAAGGGAGAAACCAGAAAGTCTTGAAAAGGTAATTAAGAATTTAAATAATTTCTTGGAGATTGGAGAAATAATATGCCATGGTATTACACAAGCTTTGGCTTCTCTCTCTGGAGGATTCCCTTCCCACGAACACTGTTGTATCATTTCTTTCAGATCCTGAGACTCCAGCAGGATGTCTTATCAACAGCAGCAGTGCAAGCAGCCCTGCCAGCCACCTCCTGTGTGCCCCACGCCAAAGTGCCCAGAGCCATGTCCACCCCCGAAGTGCCCTGAGCCCTGCCCACCACCAAAGTGTCCACAGCCCTGCCCACCTCAGCAGTGCCAGCAGAAATATCCTCCTGTGACACCTTCCCCACCCTGCCAGTCAAAGTATCCACCGAAGAGCAAGTAACAGCTTCAGAATTCATCAGGACCAAGAAAGGATAAGGATATTTGGCTCACCTCGTTCCACAGCTCCACCTTCATCTTCTCATCAAAGCCTACCATGGATACACAGGGAGCTTCTTTCTCCTTAGCCAGTAATCTGCCCATGATGATCCCTGACAGCAAAAAGTTTCTTTTCTGAGGCTGCCATACTGCCACTGTCCAGGTGGAGACTGAGCAAAGGAAGTCCTGGGCTGTGCCAGCTCCCAGAGCTTCGGAAGAAAGAGCAGCAGCTCTCTCCCTGGGAACCATCAGAGAATTCTGTTGATGTGTTCTGTGTCTGTCTGTCACCTGGTCACGAGCTTCTACCACCTTTGCAATTGTCACTTATCTTTCACTCCCTGAATAAAGTATCTATGCATATA",
        ]

        self.assertEqual(result_to_test, expected_result)

    def test_transcript_gene(self):
        """
        Test transcript seq function on a gene.
        """
        result_to_test = seq("ENSG00000241794", seqtype="transcript")
        # This should return the amino acid sequence of the canonical transcript of ENSG00000241794 which is ENST00000392653
        expected_result = [
            ">uniprot_id: P35326 ensembl_id: ENST00000392653 gene_name(s): SPRR2A organism: Homo sapiens (Human) sequence_length: 72",
            "MSYQQQQCKQPCQPPPVCPTPKCPEPCPPPKCPEPCPPPKCPQPCPPQQCQQKYPPVTPSPPCQSKYPPKSK",
        ]

        self.assertEqual(result_to_test, expected_result)

    def test_transcript(self):
        """
        Test transcript seq function on a transcript.
        """
        result_to_test = seq("ENST00000392653", seqtype="transcript")
        expected_result = [
            ">uniprot_id: P35326 ensembl_id: ENST00000392653 gene_name(s): SPRR2A organism: Homo sapiens (Human) sequence_length: 72",
            "MSYQQQQCKQPCQPPPVCPTPKCPEPCPPPKCPEPCPPPKCPQPCPPQQCQQKYPPVTPSPPCQSKYPPKSK",
        ]

        self.assertEqual(result_to_test, expected_result)

    def test_gene_iso(self):
        """
        Test gene seq function with a gene ID and isoform=True.
        """
        result_to_test = seq("ENSG00000241794", isoform=True)
        # Since ENSG00000241794 only has one transcript, the expected results is the same as above
        expected_result = [
            ">ENST00000392653 chromosome:GRCh38:1:153056120:153057512:-1",
            "AAACCCCTGGTACCTGAGCACTGATCTGCCTTGGAGAACCTGGTGAGTCGGCTTCCTTGAGTTCCTCTGTTCTTTGTGCCCTGAAATGTTGAGTTTAATCTGAATATGGCAAGTTTGGTGGATCCAATCCTATGAAAATTGACTTGATGCTACTTAGTGGATGAAAATTTAAGATTAGAGCACAATTATATGCTATTTTAGCTTTCTTTTGTTATACAGGTAGGTATCCATATGGACAGAGAAGTTAAGGGGTAACCTTTGATATGAAGAAGAAAAAAGAACAAAGTATTTTTCTTTATTCTCTGTCTTTCTAGTGTCCTTTACAAAGGTTTGTGTCTTAGCAGGTGTGAAAGACTACAATTCTCCCTGAGCAGCCCTTTGCTCTATGCCCAAGTCAGCCCACTTGGACTTTATAACAGATAATGATGATAGGAATAGCATATTAGATTGCCCAGGGTGTCTGAACTTGTGACTGCCTTTCTTGAATTGGTTATTTTCAGGGAAATAAGATGCTTGATTCTTTATAACAGAGATAATTTATTTGGAAAAATTGTATGAGAAAACACAGGATTTCCTAGGGACAATGAAGCAATTTGTTAAAGTGGAAGGGAGAAACCAGAAAGTCTTGAAAAGGTAATTAAGAATTTAAATAATTTCTTGGAGATTGGAGAAATAATATGCCATGGTATTACACAAGCTTTGGCTTCTCTCTCTGGAGGATTCCCTTCCCACGAACACTGTTGTATCATTTCTTTCAGATCCTGAGACTCCAGCAGGATGTCTTATCAACAGCAGCAGTGCAAGCAGCCCTGCCAGCCACCTCCTGTGTGCCCCACGCCAAAGTGCCCAGAGCCATGTCCACCCCCGAAGTGCCCTGAGCCCTGCCCACCACCAAAGTGTCCACAGCCCTGCCCACCTCAGCAGTGCCAGCAGAAATATCCTCCTGTGACACCTTCCCCACCCTGCCAGTCAAAGTATCCACCGAAGAGCAAGTAACAGCTTCAGAATTCATCAGGACCAAGAAAGGATAAGGATATTTGGCTCACCTCGTTCCACAGCTCCACCTTCATCTTCTCATCAAAGCCTACCATGGATACACAGGGAGCTTCTTTCTCCTTAGCCAGTAATCTGCCCATGATGATCCCTGACAGCAAAAAGTTTCTTTTCTGAGGCTGCCATACTGCCACTGTCCAGGTGGAGACTGAGCAAAGGAAGTCCTGGGCTGTGCCAGCTCCCAGAGCTTCGGAAGAAAGAGCAGCAGCTCTCTCCCTGGGAACCATCAGAGAATTCTGTTGATGTGTTCTGTGTCTGTCTGTCACCTGGTCACGAGCTTCTACCACCTTTGCAATTGTCACTTATCTTTCACTCCCTGAATAAAGTATCTATGCATATA",
        ]

        self.assertEqual(result_to_test, expected_result)

    def test_gene_transcript_iso(self):
        """
        Test gene seq function with a transcript ID and isoform=True.
        """
        result_to_test = seq("ENST00000392653", isoform=True)
        # The isoform should not change the output for transcripts
        expected_result = [
            ">ENST00000392653 chromosome:GRCh38:1:153056120:153057512:-1",
            "AAACCCCTGGTACCTGAGCACTGATCTGCCTTGGAGAACCTGGTGAGTCGGCTTCCTTGAGTTCCTCTGTTCTTTGTGCCCTGAAATGTTGAGTTTAATCTGAATATGGCAAGTTTGGTGGATCCAATCCTATGAAAATTGACTTGATGCTACTTAGTGGATGAAAATTTAAGATTAGAGCACAATTATATGCTATTTTAGCTTTCTTTTGTTATACAGGTAGGTATCCATATGGACAGAGAAGTTAAGGGGTAACCTTTGATATGAAGAAGAAAAAAGAACAAAGTATTTTTCTTTATTCTCTGTCTTTCTAGTGTCCTTTACAAAGGTTTGTGTCTTAGCAGGTGTGAAAGACTACAATTCTCCCTGAGCAGCCCTTTGCTCTATGCCCAAGTCAGCCCACTTGGACTTTATAACAGATAATGATGATAGGAATAGCATATTAGATTGCCCAGGGTGTCTGAACTTGTGACTGCCTTTCTTGAATTGGTTATTTTCAGGGAAATAAGATGCTTGATTCTTTATAACAGAGATAATTTATTTGGAAAAATTGTATGAGAAAACACAGGATTTCCTAGGGACAATGAAGCAATTTGTTAAAGTGGAAGGGAGAAACCAGAAAGTCTTGAAAAGGTAATTAAGAATTTAAATAATTTCTTGGAGATTGGAGAAATAATATGCCATGGTATTACACAAGCTTTGGCTTCTCTCTCTGGAGGATTCCCTTCCCACGAACACTGTTGTATCATTTCTTTCAGATCCTGAGACTCCAGCAGGATGTCTTATCAACAGCAGCAGTGCAAGCAGCCCTGCCAGCCACCTCCTGTGTGCCCCACGCCAAAGTGCCCAGAGCCATGTCCACCCCCGAAGTGCCCTGAGCCCTGCCCACCACCAAAGTGTCCACAGCCCTGCCCACCTCAGCAGTGCCAGCAGAAATATCCTCCTGTGACACCTTCCCCACCCTGCCAGTCAAAGTATCCACCGAAGAGCAAGTAACAGCTTCAGAATTCATCAGGACCAAGAAAGGATAAGGATATTTGGCTCACCTCGTTCCACAGCTCCACCTTCATCTTCTCATCAAAGCCTACCATGGATACACAGGGAGCTTCTTTCTCCTTAGCCAGTAATCTGCCCATGATGATCCCTGACAGCAAAAAGTTTCTTTTCTGAGGCTGCCATACTGCCACTGTCCAGGTGGAGACTGAGCAAAGGAAGTCCTGGGCTGTGCCAGCTCCCAGAGCTTCGGAAGAAAGAGCAGCAGCTCTCTCCCTGGGAACCATCAGAGAATTCTGTTGATGTGTTCTGTGTCTGTCTGTCACCTGGTCACGAGCTTCTACCACCTTTGCAATTGTCACTTATCTTTCACTCCCTGAATAAAGTATCTATGCATATA",
        ]

        self.assertEqual(result_to_test, expected_result)

    def test_transcript_gene_iso(self):
        """
        Test transcript seq function with a gene ID and isoform=True.
        """
        result_to_test = seq("ENSG00000241794", isoform=True, seqtype="transcript")
        # Since ENSG00000241794 only has one transcript, the expected results is the AA sequence of ENST00000392653
        expected_result = [
            ">uniprot_id: P35326 ensembl_id: ENST00000392653 gene_name(s): SPRR2A organism: Homo sapiens (Human) sequence_length: 72",
            "MSYQQQQCKQPCQPPPVCPTPKCPEPCPPPKCPEPCPPPKCPQPCPPQQCQQKYPPVTPSPPCQSKYPPKSK",
        ]

        self.assertEqual(result_to_test, expected_result)

    def test_transcript_transcript_iso(self):
        """
        Test transcript seq function with a transcript ID and isoform=True.
        """
        result_to_test = seq("ENST00000392653", isoform=True, seqtype="transcript")
        # The isoform should not change the output for transcripts
        expected_result = [
            ">uniprot_id: P35326 ensembl_id: ENST00000392653 gene_name(s): SPRR2A organism: Homo sapiens (Human) sequence_length: 72",
            "MSYQQQQCKQPCQPPPVCPTPKCPEPCPPPKCPEPCPPPKCPQPCPPQQCQQKYPPVTPSPPCQSKYPPKSK",
        ]

        self.assertEqual(result_to_test, expected_result)

    ## Test bad input errors
    def test_gene_bad_type(self):
        """
        Test that a unrecognized ID throws a RuntimeError.
        """
        data = "banana"
        with self.assertRaises(RuntimeError):
            result = seq(data)

    def test_gene_iso_bad_type(self):
        """
        Test that a unrecognized ID throws a RuntimeError.
        """
        data = "banana"
        with self.assertRaises(RuntimeError):
            result = seq(data, isoform=True)

    def test_transcript_bad_type(self):
        """
        Test that a unrecognized ID throws a RuntimeError.
        """
        data = "banana"
        with self.assertRaises(RuntimeError):
            result = seq(data, seqtype="transcript")

    def test_transcript_iso_bad_type(self):
        """
        Test that a unrecognized ID throws a RuntimeError.
        """
        data = "banana"
        with self.assertRaises(RuntimeError):
            result = seq(data, isoform=True, seqtype="transcript")


if __name__ == "__main__":
    unittest.main()
